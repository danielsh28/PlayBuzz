{"version":3,"sources":["StoreConfig.ts","pages/OpeningPage.tsx","theme.ts","pages/Questionnaire.tsx","components/BuzzTypes.ts","pages/SummaryPage.tsx","components/InstallBtn.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PageMode","OpenPage","react_default","a","createElement","react_router_dom","to","useStyles","makeStyles","root","background","border","borderRadius","boxShadow","color","height","padding","theme","createMuiTheme","palette","primary","lightBlue","secondary","red","error","connect","state","question","questions","dispatch","goToNextQuest","score","type","payload","calculateResultAndGoToSummary","_ref","match","questNum","parseInt","params","submitAnswer","currScore","isLast","classes","answers","options","map","index","Grid","item","xs","Link","component","RouteLink","concat","Typography","className","key","onClick","bind","Container","text","container","direction","spacing","RESULTS","result","minScore","BUZZ_QUESTIONS","resetQuiz","resultElement","Object","toConsumableArray","reverse","find","r","message","getResult","Button","variant","initQuestionState","questionIndex","initScoreState","scoreReducer","arguments","length","undefined","action","objectSpread","questionReducer","initPageState","page","OPENING","pageReducer","SUMMARY","InstallBtn","pages","isReset","components_InstallBtn","react_router","path","Questionnaire","SummaryPage","OpeningPage","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","store","createStore","combineReducers","ReactDOM","render","ThemeProvider","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.43b817a6.chunk.js","sourcesContent":["import {PlayBuzzQuestion, BUZZ_QUESTIONS, QuestionState} from \"./components/BuzzTypes\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\nexport enum PageMode {\r\n    SUMMARY, QUIZ, OPENING\r\n}\r\n\r\ninterface PlaybuzzAction {\r\n    type: string,\r\n    payload: PlayBuzzQuestion\r\n\r\n}\r\n\r\ninterface PageAction {\r\n    type: string,\r\n    payload: PageMode\r\n}\r\n\r\ninterface PageState {\r\n    page: PageMode,\r\n}\r\n\r\ninterface ScoreState {\r\n    currScore: number,\r\n\r\n}\r\n\r\ninterface ScoreAction {\r\n    type: String,\r\n    payload: number\r\n}\r\n\r\nconst initQuestionState: QuestionState = {\r\n    question: BUZZ_QUESTIONS[0],\r\n    questionIndex: 0\r\n};\r\nconst initScoreState: ScoreState = {\r\n    currScore: 0\r\n};\r\nconst scoreReducer = (state: ScoreState = initScoreState, action: ScoreAction) => {\r\n    switch (action.type) {\r\n        case 'NEXT_QUESTION':\r\n            state = {...state, currScore: state.currScore + action.payload};\r\n            break;\r\n        case 'LAST_QUESTION_SUBMITTED':\r\n            state = {...state, currScore: state.currScore + action.payload};\r\n            break;\r\n        case 'RESET':\r\n            state = initScoreState;\r\n    }\r\n\r\n    return state;\r\n};\r\nconst questionReducer = (state = initQuestionState, action: PlaybuzzAction) => {\r\n    switch (action.type) {\r\n        case 'NEXT_QUESTION':\r\n            state = {\r\n                question: BUZZ_QUESTIONS[state.questionIndex + 1],\r\n                questionIndex: state.questionIndex + 1\r\n            };\r\n            break;\r\n        case 'RESET':\r\n            state = initQuestionState;\r\n    }\r\n\r\n    return state;\r\n};\r\nconst initPageState: PageState = {\r\n    page: PageMode.OPENING\r\n};\r\n\r\nconst pageReducer = (state: PageState = initPageState, action: PageAction,) => {\r\n\r\n    switch (action.type) {\r\n        case 'LAST_QUESTION_SUBMITTED':\r\n            state = {...state, page: PageMode.SUMMARY};\r\n            break;\r\n        case 'RESET':\r\n            state = initPageState;\r\n    }\r\n\r\n\r\n    return state;\r\n};\r\n\r\n\r\nexport default function configureStore() {\r\n    return createStore(combineReducers(\r\n        {\r\n            questions: questionReducer,\r\n            pages: pageReducer,\r\n            score: scoreReducer\r\n        }));\r\n}\r\n","import React from 'react';\r\nimport {Link, RouteComponentProps} from \"react-router-dom\";\r\n\r\nconst OpenPage: React.FC<RouteComponentProps> = () => {\r\n\r\n    return (\r\n        <div>\r\n            Welcome, Want to Find out if you Can be a Parent? click\r\n            <Link to={`/playbuzz/1`}>Here</Link>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default OpenPage;","import {createMuiTheme, Theme} from '@material-ui/core/styles';\r\nimport {lightBlue, red} from \"@material-ui/core/colors\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    root: {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n        border: 0,\r\n        borderRadius: 15,\r\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n        color: 'white',\r\n        height: 48,\r\n        padding: '0 30px',\r\n    },\r\n});\r\n\r\nexport const theme  :Theme= createMuiTheme({\r\n    palette:{\r\n        primary:lightBlue,\r\n        secondary:red,\r\n        error: red,\r\n    }\r\n\r\n});\r\n\r\n","import React from 'react';\r\nimport {PlayBuzzQuestion} from \"../components/BuzzTypes\";\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch,} from \"redux\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport { Link as RouteLink } from 'react-router-dom';\r\nimport Link from '@material-ui/core/Link';\r\nimport {Typography} from \"@material-ui/core\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useStyles} from \"../theme\";\r\n\r\ninterface PlayBuzzProps {\r\n    goToNextQuest:Function,\r\n    question:PlayBuzzQuestion,\r\n    calculateResultAndGoToSummary: Function,\r\n    isLast: boolean\r\n\r\n}\r\ninterface  matchParams {\r\n    questNum:string\r\n\r\n}\r\nconst  Questionnaire : React.FC<PlayBuzzProps & RouteComponentProps<matchParams>> = ({match,question,goToNextQuest,calculateResultAndGoToSummary})=>{\r\n    const questNum = parseInt(match.params.questNum);\r\n\r\n    function  submitAnswer(currScore: number){\r\n        if(question.isLast){\r\n            calculateResultAndGoToSummary(currScore)\r\n        }\r\n        else {\r\n            goToNextQuest(currScore);\r\n        }\r\n    }\r\n    const classes = useStyles();\r\n    const answers  = question.options.map( (a : string,index) =>\r\n        <Grid item xs>\r\n       <Link   component={RouteLink} to={`/playbuzz/${questNum + 1}`}>\r\n            <Typography className={classes.root}  key={index} onClick={submitAnswer.bind(null, index + 1)}>\r\n                {a}</Typography >\r\n        </Link>\r\n        </Grid>);\r\n    return (\r\n        <Container>\r\n        <Typography color= 'primary' >{question.text}</Typography>\r\n\r\n        <Grid container direction ='column' spacing={5} >\r\n\r\n            {answers}\r\n        </Grid>\r\n        </Container>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state :any) =>{\r\n    return {question: state.questions.question,};\r\n};\r\nconst mapDispatchToProps = (dispatch:Dispatch)=> ({\r\n    goToNextQuest :(score:number) => dispatch({type:'NEXT_QUESTION',payload:score}),\r\n    calculateResultAndGoToSummary: (score:number) => dispatch({type: 'LAST_QUESTION_SUBMITTED', payload:score})});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Questionnaire);\r\n","  export interface PlayBuzzQuestion {\r\n    text:string,\r\n    options:Array<string>,\r\n      isLast: boolean\r\n}\r\n\r\n\r\nexport  interface QuestionState{\r\n    question :PlayBuzzQuestion,\r\n    questionIndex :number\r\n}\r\n\r\nexport interface SummaryProps {\r\n    resetQuiz: Function,\r\n    score:number\r\n\r\n\r\n}\r\nexport interface BuzzResult{\r\n    result:string,\r\n    minScore:number;\r\n}\r\nexport const RESULTS: Array<BuzzResult> = [{\r\n    result:'you dont need to reproduce yourself! you are a free spirit rich internal world and you don\\'t need a child to define yourself' +\r\n    'trough him/her',\r\n    minScore:3\r\n},{result:'your normal, just like everybody else, you probably make children because everybody does and you be OK at it',\r\nminScore:6},{\r\n    result:'you was born to be a parent',\r\n    minScore:7\r\n}];\r\n\r\nexport const  BUZZ_QUESTIONS : Array<PlayBuzzQuestion> =[{\r\n    text:'How old are you?',\r\n    options:['15-23','24-32','40-100','32-40'],\r\n    isLast:false\r\n}, {\r\n    text:'How much is you career important to you?',\r\n    options:['My life is  my career',\r\n    'career is ok as long as i\\'m not getting bored',\r\n        'Its important in some case but i\\'ts not all in life',\r\n        'not much, work is for bring food to the family',\r\n\r\n    ],\r\n    isLast:false},\r\n    {\r\n        text: 'What is the most important thing in life?',\r\n        options: ['Money and power','Self fulfilment','Compassion to others','Family'],\r\n        isLast:true\r\n    }\r\n    ];\r\n\r\n","import React from 'react';\r\nimport {BuzzResult, RESULTS, SummaryProps} from \"../components/BuzzTypes\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport const SummaryPage: React.FC<SummaryProps> = ({score, resetQuiz}) => {\r\n\r\n    function getResult(): string {\r\n        const results: Array<BuzzResult> = [...RESULTS].reverse();\r\n\r\n        const resultElement: BuzzResult | undefined = results.find(r => score >= r.minScore);\r\n        if (!resultElement) {\r\n            throw {message: 'score is not value for result!'};\r\n        }\r\n\r\n        return resultElement.result\r\n\r\n    }\r\n\r\n    function resetBuzzQuiz() {\r\n        resetQuiz();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Summary</h1>\r\n            <p className=\"textResult\">\r\n                {getResult()}\r\n            </p>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={resetBuzzQuiz}>RESET QUIZ</Button>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n\r\n    return {\r\n        score: state.score.currScore\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    resetQuiz: () => dispatch({type: 'RESET'})\r\n\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SummaryPage);","import React, {FC} from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nconst  InstallBtn : FC = () => {\r\n    return(\r\n        <Button variant={\"contained\"} color = 'primary'>Install On HomePage</Button>\r\n    )\r\n};\r\n\r\nexport default InstallBtn;","import React from 'react';\nimport './App.css';\nimport {Redirect, Route, Switch} from \"react-router\";\nimport OpeningPage from './pages/OpeningPage'\nimport Questionnaire from \"./pages/Questionnaire\";\nimport SummaryPage from \"./pages/SummaryPage\";\nimport {connect} from \"react-redux\";\nimport {PageMode} from \"./StoreConfig\";\nimport InstallBtn from \"./components/InstallBtn\";\n\ninterface AppProps {\n    isLast: boolean,\n    isReset: boolean\n}\n\nconst App: React.FC<AppProps> = ({isLast, isReset}) => {\n\n\n    return (\n        <div className=\"App\">\n            <InstallBtn/>\n            <Switch>\n                <Route path={'/playbuzz/:questNum'} component={Questionnaire}/>\n                {!isReset && <Route path={'/summary'} component={SummaryPage}/>}\n                <Route path={'/'} component={OpeningPage}/>\n            </Switch>\n            {isReset && <Redirect to={'/'}/>}\n            {isLast && <Redirect to={'/summary'}/>}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: any) => ({\n    isLast: state.pages.page === PageMode.SUMMARY,\n    isReset: state.pages.page === PageMode.OPENING\n});\n\n\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from \"./StoreConfig\";\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport {theme} from './theme';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>\n    </ThemeProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}